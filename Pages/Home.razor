@page "/"

<PageTitle>Unit Converter</PageTitle>

<style>
	.converter-body {
		font-family: Arial, sans-serif;
		margin: 40px;
		background-color: #f9f9f9;
	}

	.converter-card {
		background-color: #fff;
		padding: 20px;
		border-radius: 8px;
		box-shadow: 0 2px 5px rgba(0,0,0,0.1);
		max-width: 420px;
	}

	label {
		display: block;
		margin-top: 10px;
		font-weight: bold;
	}

	input, select {
		width: 100%;
		padding: 8px;
		margin-top: 5px;
		margin-bottom: 15px;
		border: 1px solid #ccc;
		border-radius: 4px;
	}

	button {
		background-color: #0078D4;
		color: white;
		border: none;
		padding: 10px 15px;
		border-radius: 4px;
		cursor: pointer;
	}

	button:hover {
		background-color: #005a9e;
	}

	.result {
		margin-top: 20px;
		padding: 10px;
		background-color: #e6f4ea;
		border-left: 4px solid #2e7d32;
		font-weight: bold;
	}

	.error {
		color: #a80000;
		margin-top: 8px;
	}

</style>

<div class="converter-body">
	<h1>Unit Converter</h1>

	<div class="converter-card">
		<div>
			<label for="inputValue">Enter value:</label>
			<input id="inputValue" type="number" step="any" @bind="InputValue" />
		</div>

		<div>
			<label for="unitType">Select conversion:</label>
			<select id="unitType" @bind="UnitType">
				<option value="length">Length (inches to meters)</option>
				<option value="temperature">Temperature (Fahrenheit to Celsius)</option>
			</select>
		</div>

		<button @onclick="OnConvertClicked">Convert</button>

		@if (!string.IsNullOrEmpty(ErrorMessage))
		{
			<div class="error" role="alert">@ErrorMessage</div>
		}

		@if (!string.IsNullOrEmpty(Result))
		{
			<div class="result" aria-live="polite">Result: @Result</div>
		}
	</div>
</div>

@code {
	private double? InputValue { get; set; }
	private string UnitType { get; set; } = "length";
	private string? Result { get; set; }
	private string? ErrorMessage { get; set; }

	private void OnConvertClicked()
	{
		ErrorMessage = string.Empty;
		Result = string.Empty;

		if (!InputValue.HasValue)
		{
			ErrorMessage = "Please enter a numeric value.";
			return;
		}

		var value = InputValue.Value;

		// Validation: length must be > 0; temperature may be negative
		if (UnitType == "length" && value <= 0)
		{
			ErrorMessage = "Please enter a numeric value greater than zero for length.";
			return;
		}

		Result = UnitType switch
		{
			"length" => $"{value} inches = {LengthConversion(value):F2} meters",
			"temperature" => $"{value} °F = {TempConversion(value):F2} °C",
			_ => "Unknown conversion type."
		};
	}

	private static double LengthConversion(double inputInches) => inputInches * 0.0254;
	private static double TempConversion(double inputF) => (inputF - 32.0) * (5.0 / 9.0);
}
